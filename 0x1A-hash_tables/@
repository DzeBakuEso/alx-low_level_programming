#ifndef HASH_TABLES_H
#define HASH_TABLES_H

#include <stdio.h>
#include <stdlib.h>
#include <string.h>  /* Added for strdup usage */

/**
 * struct hash_node_s - Node of a hash table.
 * @key: The key, string.
 * @value: The value corresponding to a key.
 * @next: A pointer to the next node of the list.
*/
typedef struct hash_node_s
{
char *key;
char *value;
struct hash_node_s *next;
} hash_node_t;
/**
 * struct hash_table_s - Hash table data structure.
 * @size: The size of the array.
 * @array: An array of size @size.
 * Each cell of this array is a pointer  first node of a linked list.
*/
typedef struct hash_table_s
{
unsigned long int size;
hash_node_t **array;
} hash_table_t;
/* Function prototypes */
hash_table_t *hash_table_create(unsigned long int size);  /* Create new hash tble */
/* Header declarations */
unsigned long int hash_djb2(const unsigned char *str);/* DJB2 hash function */
/* Implement the key_index function for your hash table */
unsigned long int key_index(const unsigned char *key, unsigned long int size);
/* Add the prototype for the hash_table_set function */
int hash_table_set(hash_table_t *ht, const char *key, const char *value); /*ble */

#endif /* HASH_TABLES_H */
